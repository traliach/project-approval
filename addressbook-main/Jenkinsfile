pipeline {
    agent any
    parameters {
        choice(name: 'aws_account', choices: ['975050054743', '4568366404742', '922266408974'], description: 'AWS account hosting image registry')
        choice(name: 'ecr_tag', choices: ['1.1.0', '1.2.0', '1.3.0'], description: 'Choose the ECR tag version for the build')
    }
    tools {
        jdk 'OpenJDK 17' // Ensure this matches the name you configured
        maven 'maven-3.9.6'
    }
    environment {
        JAVA_HOME = '/opt/jdk-17.0.3+7'
        PATH = "${JAVA_HOME}/bin:/usr/bin:/bin:${env.PATH}"
        SONAR_TOKEN = 'sqp_dbe8510694742cc58212ec85d2c99d2d03b491ac' // Replace with your actual SonarQube token
    }
    stages {
        stage('1. Verify Environment') {
            steps {
                sh 'echo JAVA_HOME=$JAVA_HOME'
                sh 'echo PATH=$PATH'
                sh 'java -version'
                sh 'git --version'
                sh 'mvn -version'
            }
        }
        stage('2. Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'GitHub-credential', url: 'https://github.com/traliach/project-approval.git'
            }
        }
        stage('3. Build with Maven') {
            steps {
                dir('addressbook-main') {
                    withEnv(["JAVA_HOME=/opt/jdk-17.0.3+7", "PATH=/opt/jdk-17.0.3+7/bin:/usr/bin:/bin:${env.PATH}"]) {
                        sh 'mvn clean package'
                    }
                }
            }
        }
        stage('4. SonarQube analysis') {
            steps {
                dir('addressbook-main') {
                    script {
                        def scannerHome = tool 'sonarqube-scanner'
                        withSonarQubeEnv('SonarQube') {
                            sh """
                            ${scannerHome}/bin/sonar-scanner -X \
                            -Dsonar.projectKey=team34c \
                            -Dsonar.host.url=http://52.3.250.67:9000 \
                            -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }
        stage('5. Docker image build') {
            steps {
                dir('addressbook-main') {
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com"
                    sh "docker build -t team34c ."
                    sh "docker tag team34c:latest ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}"
                    sh "docker push ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}"
                }
            }
        }
        stage('6. Deployment into Kubernetes Cluster') {
            steps {
                kubeconfig(caCertificate: '', credentialsId: 'k8s-kubeconfig', serverUrl: '') {
                    sh "kubectl apply -f addressbook-main/manifest"
                }
            }
        }
        stage('7. Email Notification') {
            steps {
                mail bcc: 'traliach81@gmail.com', body: '''Build is Over. Check the application using the URL below. 
                https://abook.shiawslab.com/addressbook-1.0
                Let me know if the changes look okay.
                Thanks,
                Dominion System Technologies,
                +1 (313) 413-1477''', cc: 'fusisoft@gmail.com', from: '', replyTo: '', subject: 'Application was Successfully Deployed!!', to: 'fusisoft@gmail.com'
            }
        }
    }
}
