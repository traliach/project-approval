pipeline {
    agent { node { label "maven-sonarqube" } }
    parameters {
        choice(name: 'aws_account', choices: ['975050054743', '4568366404742', '922266408974'], description: 'AWS account hosting image registry')
        choice(name: 'ecr_tag', choices: ['1.1.0', '1.2.0', '1.3.0'], description: 'Choose the ECR tag version for the build')
    }
    tools {
        maven "maven-3.9.6"
    }
    environment {
        SONAR_TOKEN = 'sqp_dbe8510694742cc58212ec85d2c99d2d03b491ac' // Replace with your actual SonarQube token
        AWS_CLI_PATH = '/usr/local/aws-cli/v2/current/bin' // Path to AWS CLI
    }
    stages {
        stage('Verify Environment') {
            steps {
                script {
                    def dockerInstalled = sh(script: 'command -v docker', returnStatus: true) == 0
                    def awsInstalled = sh(script: "command -v ${AWS_CLI_PATH}/aws", returnStatus: true) == 0

                    if (!dockerInstalled) {
                        error "Docker is not installed. Please install Docker."
                    }
                    if (!awsInstalled) {
                        error "AWS CLI is not installed. Please install AWS CLI."
                    }
                }
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'GitHub-credential', url: 'https://github.com/traliach/project-approval.git'
            }
        }
        stage('Build with Maven') {
            steps {
                dir('addressbook-main') { // Change to the directory containing the pom.xml
                    sh "mvn clean package"
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                dir('addressbook-main') { // Change to the directory containing the source code
                    script {
                        def scannerHome = tool 'sonarqube-scanner'
                        withSonarQubeEnv("maven-sonarqube") {
                            sh """
                            ${scannerHome}/bin/sonar-scanner -X \
                            -Dsonar.projectKey=team34c \
                            -Dsonar.host.url=http://52.3.250.67:9000 \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.java.binaries=target/classes
                            """
                        }
                    }
                }
            }
        }
        stage('Docker image build and push to ECR') {
            steps {
                dir('addressbook-main') { // Change to the directory containing the Dockerfile
                    sh """
                    ${AWS_CLI_PATH}/aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com
                    docker build -t team34c .
                    docker tag team34c:latest ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}
                    docker push ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}
                    """
                }
            }
        }
        stage('Deployment into Kubernetes Cluster') {
            steps {
                kubeconfig(caCertificate: '', credentialsId: 'k8s-kubeconfig', serverUrl: '') {
                    sh "kubectl apply -f addressbook-main/manifest" // Adjust path if needed
                }
            }
        }
        stage('Email Notification') {
            steps {
                mail bcc: 'traliach81@gmail.com', body: '''Build is Over. Check the application using the URL below. 
                https://abook.shiawslab.com/addressbook-1.0
                Let me know if the changes look okay.
                Thanks,
                Dominion System Technologies,
                +1 (313) 413-1477''', cc: 'fusisoft@gmail.com', from: '', replyTo: '', subject: 'Application was Successfully Deployed!!', to: 'fusisoft@gmail.com'
            }
        }
    }
}
