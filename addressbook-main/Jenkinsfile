pipeline {
    agent { node { label "maven-sonarqube" } }
    parameters {
        choice(name: 'aws_account', choices: ['975050054743', '4568366404742', '922266408974'], description: 'AWS account hosting image registry')
        choice(name: 'ecr_tag', choices: ['1.1.0', '1.2.0', '1.3.0'], description: 'Choose the ECR tag version for the build')
    }
    tools {
        maven "maven-3.9.6"
    }
    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'GitHub-credential', url: 'https://github.com/traliach/project-approval.git'
            }
        }
        stage('2. Build with Maven') {
            steps {
                sh "mvn clean package"
            }
        }
        stage('3. SonarQube analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar-token-abook')
            }
            steps {
                script {
                    def scannerHome = tool 'sonarqube-scanner'
                    withSonarQubeEnv("maven-sonarqube") {
                        sh """
                        ${scannerHome}/bin/sonar-scanner -X \
                        -Dsonar.projectKey=team34c \
                        -Dsonar.host.url=http://52.3.250.67:9000 \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }
        stage('4. Docker image build') {
            steps {
                sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com"
                sh "docker build -t team34c ."
                sh "docker tag team34c:latest ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}"
                sh "docker push ${params.aws_account}.dkr.ecr.us-east-1.amazonaws.com/team34c:${params.ecr_tag}"
            }
        }
        stage('5. Deployment into Kubernetes Cluster') {
            steps {
                kubeconfig(caCertificate: '', credentialsId: 'k8s-kubeconfig', serverUrl: '') {
                    sh "kubectl apply -f manifest"
                }
            }
        }
        stage('6. Email Notification') {
            steps {
                mail bcc: 'traliach81@gmail.com', body: '''Build is Over. Check the application using the URL below. 
                https://abook.shiawslab.com/addressbook-1.0
                Let me know if the changes look okay.
                Thanks,
                Dominion System Technologies,
                +1 (313) 413-1477''', cc: 'fusisoft@gmail.com', from: '', replyTo: '', subject: 'Application was Successfully Deployed!!', to: 'fusisoft@gmail.com'
            }
        }
    }
}
